import java.awt.Color;

public class Map {
	
	private Item items[][];
	private User user;
	private Ghosts AI;
	
	public int width=28;
	public int height=31;
	public int blocksize=20;
  public int numFood;
  public boolean poweredUp;
  public Color powerColor;
	
	private final int mapdata[] =
	{ 
    5,4,4,4,4,4,4,4,4,4,4,4,4,7,5,4,4,4,4,4,4,4,4,4,4,4,4,7,
    3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,
    3,1,5,4,4,7,1,5,4,4,4,7,1,3,3,1,5,4,4,4,7,1,5,4,4,7,1,3,
    3,2,3,0,0,3,1,3,0,0,0,3,1,3,3,1,3,0,0,0,3,1,3,0,0,3,2,3,
    3,1,6,4,4,8,1,6,4,4,4,8,1,6,8,1,6,4,4,4,8,1,6,4,4,8,1,3,
    3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
    3,1,5,4,4,7,1,5,7,1,5,4,4,4,4,4,4,7,1,5,7,1,5,4,4,7,1,3,
    3,1,6,4,4,8,1,3,3,1,6,4,4,7,5,4,4,8,1,3,3,1,6,4,4,8,1,3,
    3,1,1,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,1,1,3,
    6,4,4,4,4,7,1,3,6,4,4,7,0,3,3,0,5,4,4,8,3,1,5,4,4,4,4,8, 
    0,0,0,0,0,3,1,3,5,4,4,8,0,6,8,0,6,4,4,7,3,1,3,0,0,0,0,0,
    0,0,0,0,0,3,1,3,3,0,0,0,0,0,0,0,0,0,0,3,3,1,3,0,0,0,0,0,
    0,0,0,0,0,3,1,3,3,0,5,4,4,4,4,4,4,7,0,3,3,1,3,0,0,0,0,0,
    4,4,4,4,4,8,1,6,8,0,3,4,4,4,4,4,4,3,0,6,8,1,6,4,4,4,4,4,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
    4,4,4,4,4,7,1,5,7,0,3,4,4,4,4,4,4,3,0,5,7,1,5,4,4,4,4,4,
    0,0,0,0,0,3,1,3,3,0,6,4,4,4,4,4,4,8,0,3,3,1,3,0,0,0,0,0,
    0,0,0,0,0,3,1,3,3,0,0,0,0,0,0,0,0,0,0,3,3,1,3,0,0,0,0,0,
    0,0,0,0,0,3,1,3,3,0,5,4,4,4,4,4,4,7,0,3,3,1,3,0,0,0,0,0,
    5,4,4,4,4,8,1,6,8,0,6,4,4,7,5,4,4,8,0,6,8,1,6,4,4,4,4,7,
    3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,
    3,1,5,4,4,7,1,5,4,4,4,7,1,3,3,1,5,4,4,4,7,1,5,4,4,7,1,3,
    3,1,6,4,7,3,1,6,4,4,4,8,1,6,8,1,6,4,4,4,8,1,3,5,4,8,1,3,
    3,2,1,1,3,3,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,3,3,1,1,2,3,
    6,4,7,1,3,3,1,5,7,1,5,4,4,4,4,4,4,7,1,5,7,1,3,3,1,5,4,8,
    5,4,8,1,6,8,1,3,3,1,6,4,4,7,5,4,4,8,1,3,3,1,6,8,1,6,4,7,
    3,1,1,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,1,1,3,
    3,1,5,4,4,4,4,8,6,4,4,7,1,3,3,1,5,4,4,8,6,4,4,4,4,7,1,3,
    3,1,6,4,4,4,4,4,4,4,4,8,1,6,8,1,6,4,4,4,4,4,4,4,4,8,1,3,
    3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
    6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8
  };
	
	public Map(int w, int h, int bs) {
    numFood = 0;
		/*width = w;
		height = h;
		blocksize = bs;*/
		items = new Item[width][height];
		for (int x=0; x<width; x++) {
			for (int y=0; y<height; y++) {
				switch (mapdata[y*width+x]) {
					case 0:
						items[x][y] = null;
						break;
					case Item.ITEM_FOOD:
						items[x][y] = new Item(x, y, mapdata[y*width+x], 25, Color.white, this);
            numFood++;
            break;
					case Item.ITEM_POWERUP:
						items[x][y] = new Item(x, y, mapdata[y*width+x], 100, Color.white, this);
            numFood++;
						break;
					default:
						items[x][y] = new Item(x, y, mapdata[y*width+x], 0, Color.blue, this);
						break;
				}
			}
		}

      user = new User(14, 23, Color.yellow, this);
      AI = new Ghosts(12, 14, 4, user, this);
      poweredUp = false;
	}

	/* This method is used to improve the efficiency of distribution: remote AI calculators
		need to know where walls are present, but calling map methods to find out presents
		massive overhead in the form of required inter-machine communication.  Instead, the AI 
		calculators will be passed a raw integer array and perform a deep copy in their constructor. */
	public int[] getRawData() {
		//Currently just returns mapdata[], but if maps from files are ever implemented that would need to change
		return mapdata;
	}


  public op void newLevel() {
    numFood = 0;
    for (int x=0; x<width; x++) {
      for (int y=0; y<height; y++) {
        switch (mapdata[y*width+x]) {
          case 0:
            items[x][y] = null;
            break;
          case Item.ITEM_FOOD:
            items[x][y] = new Item(x, y, mapdata[y*width+x], 25, Color.white, this);
            numFood++;
            break;
          case Item.ITEM_POWERUP:
            items[x][y] = new Item(x, y, mapdata[y*width+x], 100, Color.white, this);
            numFood++;
            break;
          default:
            items[x][y] = new Item(x, y, mapdata[y*width+x], 0, Color.blue, this);
            break;
        }
      }
    }
  }

  public op void powerUp() {
    poweredUp = true;

    powerColor = Color.blue;
    try {
      Thread.sleep(7000);
    } catch (Exception e) {e.printStackTrace(); }

    powerColor = Color.cyan;
    try {
      Thread.sleep(2000);
    } catch (Exception e) {e.printStackTrace(); }

    poweredUp = false;
  }
	
   public boolean checkBounds(int x, int y) {
      //Return true if coordinates are in bounds (e.g. within array bound), false otherwise
      return !(x < 0 || x >= width || y < 0 || y >= height);
   }

   public boolean isOpen(int x, int y) {
      //Return true if coordinates are in bounds and not blocked
      if (checkBounds(x,y) == false)
         return false;
      
      if (items[x][y] != null)
         return !items[x][y].isEdge();

      return true;
   }

   public User getUser() {
      return user;
   }
   public Ghosts getAI() {
      return AI;
   }

   public void respawn() {
      send user.respawn();
      send AI.respawn();
   }

	public Item getItem(int x, int y) {
		return items[x][y];
	}
	
	public Item[][] getItems() {
		return items;
	}

   public void removeItem(int x, int y) {
      items[x][y] = null;
   }
	
}
